// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderFieldNames          = builder.RawFieldNames(&Order{})
	orderRows                = strings.Join(orderFieldNames, ",")
	orderRowsExpectAutoSet   = strings.Join(stringx.Remove(orderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderRowsWithPlaceHolder = strings.Join(stringx.Remove(orderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	orderModel interface {
		Insert(ctx context.Context, data *Order) (sql.Result, error)
		TranIncInsert(tx *sql.Tx, data *Order) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Order, error)
		Update(ctx context.Context, data *Order) error
		TranDelUpdate(tx *sql.Tx, user_id int) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrderModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Order struct {
		Id             int64           `db:"id"`
		Userid         sql.NullInt64   `db:"userid"`          // 用户ID
		Goodsid        int64  `db:"goodsid"`         // 商品ID
		GoodsCount   int64   `db:"goods_count"`     // 下单商品数量
		GoodsPrice     sql.NullFloat64 `db:"goods_price"`     // 总价格
		PayType        sql.NullInt64   `db:"pay_type"`        // 支付方式
		State          sql.NullInt64   `db:"state"`           // 支付状态
		CreatedAt      sql.NullTime    `db:"created_at"`      // 创建时间
		UpdatedAt      sql.NullTime    `db:"updated_at"`      // 修改时间
		DeletedAt      sql.NullTime    `db:"deleted_at"`      // 删除时间
		OrderNumbering sql.NullString  `db:"order_numbering"` // 订单号
	}
)

func newOrderModel(conn sqlx.SqlConn) *defaultOrderModel {
	return &defaultOrderModel{
		conn:  conn,
		table: "`order`",
	}
}

func (m *defaultOrderModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOrderModel) FindOne(ctx context.Context, id int64) (*Order, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderRows, m.table)
	var resp Order
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderModel) Insert(ctx context.Context, data *Order) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, orderRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Userid, data.Goodsid, data.GoodsCount, data.GoodsPrice, data.PayType, data.State, data.DeletedAt, data.OrderNumbering)
	return ret, err
}
func (m *defaultOrderModel) TranIncInsert(tx *sql.Tx, data *Order) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, orderRowsExpectAutoSet)
	ret, err := tx.Exec( query, data.Userid, data.Goodsid, data.GoodsCount, data.GoodsPrice, data.PayType, data.State, data.DeletedAt, data.OrderNumbering)
	return ret, err
}
func (m *defaultOrderModel) Update(ctx context.Context, data *Order) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Userid, data.Goodsid, data.GoodsCount, data.GoodsPrice, data.PayType, data.State, data.DeletedAt, data.OrderNumbering, data.Id)
	return err
}
func (m *defaultOrderModel) TranDelUpdate(tx *sql.Tx, user_id int) error {
	query := fmt.Sprintf("update %s set deleted_at=CURRENT_DATE where `userid` = ?", m.table)
	_, err := tx.Exec(query,user_id)
	return err
}
func (m *defaultOrderModel) tableName() string {
	return m.table
}
