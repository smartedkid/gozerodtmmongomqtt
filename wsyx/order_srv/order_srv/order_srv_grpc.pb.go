// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: order_srv.proto

package order_srv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderSrv_Ping_FullMethodName         = "/order_srv.Order_srv/Ping"
	OrderSrv_Order_FullMethodName        = "/order_srv.Order_srv/Order"
	OrderSrv_TranInsOrder_FullMethodName = "/order_srv.Order_srv/TranInsOrder"
	OrderSrv_TranDelOrder_FullMethodName = "/order_srv.Order_srv/TranDelOrder"
)

// OrderSrvClient is the client API for OrderSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderSrvClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Order(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*AddOrderResponse, error)
	TranInsOrder(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*AddOrderResponse, error)
	TranDelOrder(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*AddOrderResponse, error)
}

type orderSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderSrvClient(cc grpc.ClientConnInterface) OrderSrvClient {
	return &orderSrvClient{cc}
}

func (c *orderSrvClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, OrderSrv_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSrvClient) Order(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*AddOrderResponse, error) {
	out := new(AddOrderResponse)
	err := c.cc.Invoke(ctx, OrderSrv_Order_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSrvClient) TranInsOrder(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*AddOrderResponse, error) {
	out := new(AddOrderResponse)
	err := c.cc.Invoke(ctx, OrderSrv_TranInsOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderSrvClient) TranDelOrder(ctx context.Context, in *AddOrderRequest, opts ...grpc.CallOption) (*AddOrderResponse, error) {
	out := new(AddOrderResponse)
	err := c.cc.Invoke(ctx, OrderSrv_TranDelOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderSrvServer is the server API for OrderSrv service.
// All implementations must embed UnimplementedOrderSrvServer
// for forward compatibility
type OrderSrvServer interface {
	Ping(context.Context, *Request) (*Response, error)
	Order(context.Context, *AddOrderRequest) (*AddOrderResponse, error)
	TranInsOrder(context.Context, *AddOrderRequest) (*AddOrderResponse, error)
	TranDelOrder(context.Context, *AddOrderRequest) (*AddOrderResponse, error)
	mustEmbedUnimplementedOrderSrvServer()
}

// UnimplementedOrderSrvServer must be embedded to have forward compatible implementations.
type UnimplementedOrderSrvServer struct {
}

func (UnimplementedOrderSrvServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedOrderSrvServer) Order(context.Context, *AddOrderRequest) (*AddOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Order not implemented")
}
func (UnimplementedOrderSrvServer) TranInsOrder(context.Context, *AddOrderRequest) (*AddOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranInsOrder not implemented")
}
func (UnimplementedOrderSrvServer) TranDelOrder(context.Context, *AddOrderRequest) (*AddOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranDelOrder not implemented")
}
func (UnimplementedOrderSrvServer) mustEmbedUnimplementedOrderSrvServer() {}

// UnsafeOrderSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderSrvServer will
// result in compilation errors.
type UnsafeOrderSrvServer interface {
	mustEmbedUnimplementedOrderSrvServer()
}

func RegisterOrderSrvServer(s grpc.ServiceRegistrar, srv OrderSrvServer) {
	s.RegisterService(&OrderSrv_ServiceDesc, srv)
}

func _OrderSrv_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSrvServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderSrv_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSrvServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSrv_Order_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSrvServer).Order(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderSrv_Order_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSrvServer).Order(ctx, req.(*AddOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSrv_TranInsOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSrvServer).TranInsOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderSrv_TranInsOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSrvServer).TranInsOrder(ctx, req.(*AddOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderSrv_TranDelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderSrvServer).TranDelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderSrv_TranDelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderSrvServer).TranDelOrder(ctx, req.(*AddOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderSrv_ServiceDesc is the grpc.ServiceDesc for OrderSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order_srv.Order_srv",
	HandlerType: (*OrderSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _OrderSrv_Ping_Handler,
		},
		{
			MethodName: "Order",
			Handler:    _OrderSrv_Order_Handler,
		},
		{
			MethodName: "TranInsOrder",
			Handler:    _OrderSrv_TranInsOrder_Handler,
		},
		{
			MethodName: "TranDelOrder",
			Handler:    _OrderSrv_TranDelOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_srv.proto",
}
