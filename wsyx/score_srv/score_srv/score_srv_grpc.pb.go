// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: score_srv.proto

package score_srv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ScoreSrv_Ping_FullMethodName         = "/score_srv.Score_srv/Ping"
	ScoreSrv_AddUserScore_FullMethodName = "/score_srv.Score_srv/AddUserScore"
	ScoreSrv_TranInsScore_FullMethodName = "/score_srv.Score_srv/TranInsScore"
	ScoreSrv_TranDelScore_FullMethodName = "/score_srv.Score_srv/TranDelScore"
)

// ScoreSrvClient is the client API for ScoreSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoreSrvClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddUserScore(ctx context.Context, in *AddUserScoreRequest, opts ...grpc.CallOption) (*AddUserScoreResponse, error)
	TranInsScore(ctx context.Context, in *AddUserScoreRequest, opts ...grpc.CallOption) (*AddUserScoreResponse, error)
	TranDelScore(ctx context.Context, in *AddUserScoreRequest, opts ...grpc.CallOption) (*AddUserScoreResponse, error)
}

type scoreSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewScoreSrvClient(cc grpc.ClientConnInterface) ScoreSrvClient {
	return &scoreSrvClient{cc}
}

func (c *scoreSrvClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ScoreSrv_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreSrvClient) AddUserScore(ctx context.Context, in *AddUserScoreRequest, opts ...grpc.CallOption) (*AddUserScoreResponse, error) {
	out := new(AddUserScoreResponse)
	err := c.cc.Invoke(ctx, ScoreSrv_AddUserScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreSrvClient) TranInsScore(ctx context.Context, in *AddUserScoreRequest, opts ...grpc.CallOption) (*AddUserScoreResponse, error) {
	out := new(AddUserScoreResponse)
	err := c.cc.Invoke(ctx, ScoreSrv_TranInsScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreSrvClient) TranDelScore(ctx context.Context, in *AddUserScoreRequest, opts ...grpc.CallOption) (*AddUserScoreResponse, error) {
	out := new(AddUserScoreResponse)
	err := c.cc.Invoke(ctx, ScoreSrv_TranDelScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScoreSrvServer is the server API for ScoreSrv service.
// All implementations must embed UnimplementedScoreSrvServer
// for forward compatibility
type ScoreSrvServer interface {
	Ping(context.Context, *Request) (*Response, error)
	AddUserScore(context.Context, *AddUserScoreRequest) (*AddUserScoreResponse, error)
	TranInsScore(context.Context, *AddUserScoreRequest) (*AddUserScoreResponse, error)
	TranDelScore(context.Context, *AddUserScoreRequest) (*AddUserScoreResponse, error)
	mustEmbedUnimplementedScoreSrvServer()
}

// UnimplementedScoreSrvServer must be embedded to have forward compatible implementations.
type UnimplementedScoreSrvServer struct {
}

func (UnimplementedScoreSrvServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedScoreSrvServer) AddUserScore(context.Context, *AddUserScoreRequest) (*AddUserScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserScore not implemented")
}
func (UnimplementedScoreSrvServer) TranInsScore(context.Context, *AddUserScoreRequest) (*AddUserScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranInsScore not implemented")
}
func (UnimplementedScoreSrvServer) TranDelScore(context.Context, *AddUserScoreRequest) (*AddUserScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranDelScore not implemented")
}
func (UnimplementedScoreSrvServer) mustEmbedUnimplementedScoreSrvServer() {}

// UnsafeScoreSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoreSrvServer will
// result in compilation errors.
type UnsafeScoreSrvServer interface {
	mustEmbedUnimplementedScoreSrvServer()
}

func RegisterScoreSrvServer(s grpc.ServiceRegistrar, srv ScoreSrvServer) {
	s.RegisterService(&ScoreSrv_ServiceDesc, srv)
}

func _ScoreSrv_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreSrvServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreSrv_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreSrvServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreSrv_AddUserScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreSrvServer).AddUserScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreSrv_AddUserScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreSrvServer).AddUserScore(ctx, req.(*AddUserScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreSrv_TranInsScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreSrvServer).TranInsScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreSrv_TranInsScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreSrvServer).TranInsScore(ctx, req.(*AddUserScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoreSrv_TranDelScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreSrvServer).TranDelScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoreSrv_TranDelScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreSrvServer).TranDelScore(ctx, req.(*AddUserScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScoreSrv_ServiceDesc is the grpc.ServiceDesc for ScoreSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScoreSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "score_srv.Score_srv",
	HandlerType: (*ScoreSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ScoreSrv_Ping_Handler,
		},
		{
			MethodName: "AddUserScore",
			Handler:    _ScoreSrv_AddUserScore_Handler,
		},
		{
			MethodName: "TranInsScore",
			Handler:    _ScoreSrv_TranInsScore_Handler,
		},
		{
			MethodName: "TranDelScore",
			Handler:    _ScoreSrv_TranDelScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "score_srv.proto",
}
